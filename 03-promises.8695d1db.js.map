{"mappings":"iiBAAA,IAIIA,EAJJC,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAChCC,EAAa,GAkCjB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EACEM,EAAAhB,GAASiB,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,QAIlDG,EACEK,EAAAhB,GAASiB,OAAOG,QACd,sBAAqCD,OAAfZ,EAAS,QAAYY,OAANX,EAAM,O,GAIhDA,E,IAhDPN,EAAKmB,iBAAiB,UAAU,SAAAC,GAE9B,OADAjB,EAAWiB,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MAC9BC,QAAQC,IAAItB,E,IAGrBH,EAAKmB,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEM,iBACF,IAAMC,EAAWxB,EAAWyB,OACtBC,EAAY1B,EAAW2B,KACvBC,EAAa5B,EAAW6B,MAC9BnC,EAAQkC,EACR,IAAK,IAAIE,EAAI,EAAGA,GAAKN,EAAUM,GAAK,EAElC7B,EAAc6B,EADdpC,EAAQqC,OAAOrC,GAASqC,OAAOL,IAE5BM,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUgC,EAAKD,EAALJ,MACjB,OAAOxB,QACLM,EAAAhB,GAASiB,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANoB,EAAM,O,IAInDC,OAAM,SAAAF,G,IAAG/B,EAAQ+B,EAAR/B,SAAUkC,EAAKH,EAALJ,MAClB,OAAOvB,OACLK,EAAAhB,GAASiB,OAAOG,QACd,sBAAuCD,OAAfZ,EAAS,QAAYY,OAANsB,EAAM,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nlet dataObject = {};\nlet delay;\n\nform.addEventListener('change', e => {\n  dataObject[e.target.name] = e.target.value;\n  return console.log(dataObject);\n});\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const position = dataObject.amount;\n  const delayStep = dataObject.step;\n  const firstDelay = dataObject.delay;\n  delay = firstDelay;\n  for (let i = 1; i <= position; i += 1) {\n    delay = Number(delay) + Number(delayStep);\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        return resolve(\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        );\n      })\n      .catch(({ position, delay }) => {\n        return reject(\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          )\n        );\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          )\n        );\n      } else {\n        reject(\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          )\n        );\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$delay","$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$dataObject","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","addEventListener","e","target","name","value","console","log","preventDefault","position1","amount","delayStep","step","firstDelay","delay","i","Number","then","param","delay1","catch","delay2"],"version":3,"file":"03-promises.8695d1db.js.map"}